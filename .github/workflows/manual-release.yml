name: Release (manual)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "New version tag (e.g., v1.2.3 or 1.2.3)"
        required: true
        type: string
      prerelease:
        description: "Mark as prerelease"
        required: false
        type: boolean
        default: false

permissions:
  contents: write

concurrency:
  group: release-${{ github.event.inputs.version || github.sha }}
  cancel-in-progress: false

jobs:
  release:
    name: Build, Tag, Changelog, Release
    runs-on: ubuntu-latest

    env:
      DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
      CHANGELOG_PATH: CHANGELOG.md
      INSTRUCT_PATH: changelog_instruct.txt

      # LLM configuration
      LLM_BASE_URL: https://integrate.api.nvidia.com/v1
      LLM_MODEL: qwen/qwen3-coder-480b-a35b-instruct
      LLM_API_KEY: ${{ secrets.LLM_API_KEY }}

      # Git identity (for committing CHANGELOG)
      GIT_AUTHOR_NAME: github-actions[bot]
      GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
      GIT_COMMITTER_NAME: github-actions[bot]
      GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com

    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.DEFAULT_BRANCH }}
          fetch-depth: 0
          persist-credentials: true

      - name: Configure git user
        run: |
          git config user.name "${GIT_AUTHOR_NAME}"
          git config user.email "${GIT_AUTHOR_EMAIL}"

      - name: Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build (shaded JAR)
        run: ./gradlew --no-daemon clean build

      - name: Normalize & export version
        id: version
        run: |
          set -euo pipefail
          RAW="${{ github.event.inputs.version }}"
          if [[ -z "$RAW" ]]; then
            echo "Version input is required" >&2
            exit 1
          fi
          RAW="${RAW//[[:space:]]/}"
          TAG="$RAW"
          echo "Using tag: $TAG"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "NEW_TAG=$TAG" >> "$GITHUB_ENV"

      - name: Ensure tag does not already exist
        run: |
          set -euo pipefail
          git fetch --tags
          if git rev-parse -q --verify "refs/tags/${NEW_TAG}" >/dev/null; then
            echo "Tag ${NEW_TAG} already exists. Aborting." >&2
            exit 1
          fi

      - name: Create & push tag
        run: |
          set -euo pipefail
          git tag -a "${NEW_TAG}" -m "Release ${NEW_TAG}"
          git push origin "${NEW_TAG}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Generate/Update CHANGELOG for this tag
        run: |
          python scripts/generate_changelog.py \
            --new-tag "${NEW_TAG}" \
            --instruct "${INSTRUCT_PATH}" \
            --changelog "${CHANGELOG_PATH}" \
            --model "${LLM_MODEL}"

      - name: Push CHANGELOG commit (if changed)
        run: |
          set -euo pipefail
          if git diff --quiet -- "${CHANGELOG_PATH}"; then
            echo "No changes to commit."
          else
            git add "${CHANGELOG_PATH}"
            git commit -m "chore(changelog): update for ${NEW_TAG}"
            git push origin "HEAD:${DEFAULT_BRANCH}"
          fi

      - name: Extract release notes for this version
        id: notes
        env:
          NEW_TAG: ${{ env.NEW_TAG }}
          CHANGELOG_PATH: ${{ env.CHANGELOG_PATH }}
        run: |
          set -euo pipefail
          python - << 'PY'
          import os, re, sys
          tag = os.environ["NEW_TAG"]
          path = os.environ["CHANGELOG_PATH"]
          with open(path, encoding="utf-8") as f:
            text = f.read()
          pat = re.compile(rf"(?ms)^##\s*\[\s*{re.escape(tag)}\s*].*?(?=^##\s*\[|\Z)")
          m = pat.search(text)
          if not m:
            print("ERROR: Could not find changelog section for", tag, file=sys.stderr)
            sys.exit(1)
          outp = "RELEASE_NOTES.md"
          with open(outp, "w", encoding="utf-8") as o:
            o.write(m.group(0).strip() + "\n")
          print(f"::group::Release notes preview\n{m.group(0).strip()}\n::endgroup::")
          print(f"file={outp}")
          PY
          echo "file=RELEASE_NOTES.md" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release and upload JAR(s)
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          prerelease: ${{ github.event.inputs.prerelease }}
          body_path: ${{ steps.notes.outputs.file }}
          files: |
            build/libs/*.jar

      # (Optional) also keep artifacts in Actions for convenience
      - name: Upload built JARs as Actions artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-jars-${{ steps.version.outputs.tag }}
          path: build/libs/*.jar
          if-no-files-found: error
