#!/usr/bin/env bash
# Minimal VM bootstrap for Kotlin/Gradle (JDK 21) on Ubuntu 24.04
# Purpose: provision a clean, container/VM-friendly workspace for an AI agent.
# Assumes: running as root. No sudo used.

set -Eeuo pipefail

### -------- Config knobs (env overridable) --------
# Set to "none" (no warmup), "light" (plugins), or "build" (full build -x test)
: "${PREWARM_GRADLE:=light}"

# Where to keep Gradle caches (outside repo so clean builds don’t nuke cache)
: "${GRADLE_USER_HOME:=/opt/gradle-home}"

# Locale to ensure deterministic tool output
: "${LOCALE:=en_US.UTF-8}"

# Memory settings for short-lived CI/agent Gradle invocations
: "${GRADLE_OPTS:="-Dorg.gradle.daemon=false -Dkotlin.daemon.enabled=false -Dorg.gradle.jvmargs='-Xmx2g -XX:+UseParallelGC'"}"

### -------- Sanity & OS checks --------
if [[ "$(id -u)" -ne 0 ]]; then
  echo "Error: this script must run as root (the setup console is root by default)." >&2
  exit 1
fi

if [[ -f /etc/os-release ]]; then
  . /etc/os-release
  if [[ "${VERSION_CODENAME:-}" != "noble" && "${VERSION_ID:-}" != "24.04" ]]; then
    echo "Warning: Detected ${PRETTY_NAME:-unknown}. Script is tuned for Ubuntu 24.04 (Noble)." >&2
  fi
fi

### -------- Packages --------
export DEBIAN_FRONTEND=noninteractive
apt-get update -y
# 1) Install & configure system CA bundle first
apt-get install -y --no-install-recommends ca-certificates
update-ca-certificates -f || true
# Ensure the java keystore directory exists before postinst runs
install -d -m 0755 /etc/ssl/certs/java

# 2) Now install JDK and the Java CA glue, plus the other tools
apt-get install -y --no-install-recommends \
  openjdk-21-jdk-headless ca-certificates-java \
  git curl wget \
  unzip zip tar gzip bzip2 xz-utils \
  coreutils findutils bash \
  jq gnupg \
  tzdata locales \
  netbase

# Make sure the java keystore actually got created; if not, force postinst
dpkg --configure -a
if [[ ! -s /etc/ssl/certs/java/cacerts ]]; then
  /var/lib/dpkg/info/ca-certificates-java.postinst configure || true
fi

# Trim apt metadata (keeps images smaller)
rm -rf /var/lib/apt/lists/*

### -------- Locale & timezone (non-interactive sane defaults) --------
if ! locale -a | grep -q "^${LOCALE}$"; then
  sed -i "s/# ${LOCALE}/${LOCALE}/" /etc/locale.gen || true
  echo "${LOCALE} UTF-8" >> /etc/locale.gen || true
  locale-gen "${LOCALE}"
fi
update-locale LANG="${LOCALE}" LC_ALL="${LOCALE}"
: "${TZ:=UTC}"
ln -sf "/usr/share/zoneinfo/${TZ}" /etc/localtime
dpkg-reconfigure -f noninteractive tzdata >/dev/null 2>&1 || true

### -------- Java environment --------
# Discover JAVA_HOME from javac path to avoid hardcoding distro layout
JAVA_BIN="$(command -v javac)"
if [[ -z "${JAVA_BIN}" ]]; then
  echo "Error: javac not found after install." >&2
  exit 1
fi
JAVA_HOME="$(dirname "$(dirname "$(readlink -f "${JAVA_BIN}")")")"

# Persist environment for interactive/agent shells
install -d -m 0755 /etc/profile.d
cat >/etc/profile.d/ai-agent-env.sh <<EOF
# Auto-generated by setup.sh
export LANG=${LOCALE}
export LC_ALL=${LOCALE}
export JAVA_HOME=${JAVA_HOME}
export PATH=\$JAVA_HOME/bin:\$PATH
export GRADLE_USER_HOME=${GRADLE_USER_HOME}
export GRADLE_OPTS=${GRADLE_OPTS}
EOF

# Apply env for this session too
export LANG="${LOCALE}" LC_ALL="${LOCALE}" JAVA_HOME="${JAVA_HOME}"
export PATH="${JAVA_HOME}/bin:${PATH}"
export GRADLE_USER_HOME="${GRADLE_USER_HOME}"
export GRADLE_OPTS="${GRADLE_OPTS}"

### -------- Gradle cache directory --------
install -d -m 0777 "${GRADLE_USER_HOME}"

### -------- Git safety & QoL --------
# Prevent "dubious ownership" errors when agents mount repos in odd ways
git config --global --add safe.directory '*'
# Make diffs more readable for Kotlin, Gradle, YAML, etc.
git config --global core.autocrlf input || true
git config --global init.defaultBranch main || true

### -------- Repo bootstrap --------
# Ensure gradlew exists and is executable (use wrapper already in the repo)
if [[ -f "./gradlew" ]]; then
  chmod +x ./gradlew
else
  echo "Warning: ./gradlew not found in repo. Using system Gradle is not recommended." >&2
fi

echo "Java version:"
java -version || true

# Quick check so Gradle wrapper & plugins are pulled
if [[ -x "./gradlew" ]]; then
  echo "Priming Gradle wrapper & plugins..."
  # 'help' resolves plugin classpaths without a full build
  ./gradlew -g "${GRADLE_USER_HOME}" --no-daemon --stacktrace help || true
  ./gradlew -g "${GRADLE_USER_HOME}" --no-daemon --stacktrace --version || true
fi

### -------- Optional prewarm (speeds up first agent action) --------
case "${PREWARM_GRADLE}" in
  none|"")
    echo "Skipping Gradle prewarm."
    ;;
  light)
    echo "Prewarm(light): resolve configurations & detekt plugins…"
    # Resolve project deps & detekt plugin without running tests
    ./gradlew -g "${GRADLE_USER_HOME}" --no-daemon --stacktrace \
      dependencies detektClasses || true
    ;;
  build)
    echo "Prewarm(build): building project (-x test)…"
    ./gradlew -g "${GRADLE_USER_HOME}" --no-daemon --stacktrace \
      build -x test || true
    ;;
  *)
    echo "Unknown PREWARM_GRADLE='${PREWARM_GRADLE}', skipping."
    ;;
esac

### -------- Quality check: verify Kotlin toolchain (21) --------
# Your build.gradle.kts sets jvmToolchain(21); ensure javac 21 is visible.
JVER="$(java -version 2>&1 | head -n1 || true)"
echo "Detected ${JVER}"

### -------- Final summary --------
cat <<SUMMARY

Provisioning complete

Key paths / vars:
  JAVA_HOME=${JAVA_HOME}
  GRADLE_USER_HOME=${GRADLE_USER_HOME}
  GRADLE_OPTS=${GRADLE_OPTS}
  Locale=${LOCALE}, TZ=${TZ}

Common next commands:
  ./gradlew build -x test
  ./gradlew detekt
  ./gradlew shadowJar

Tip: tweak prewarm by exporting PREWARM_GRADLE=none|light|build before running setup.sh
SUMMARY
